Index: avalon/actions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\r\n\r\n\r\nclass Action:\r\n    def __init__(self, regex: str):\r\n        \"\"\"\r\n        Base Action class. Everything inheriting from it is an action.\r\n        \"\"\"\r\n        self.regex = re.compile(regex)\r\n\r\n    def validate(self, cmd: str):\r\n        if self.regex.match(cmd):\r\n            return True\r\n        return False\r\n\r\n\r\nclass LookAction(Action):\r\n    def __init__(self):\r\n        super().__init__(r\"^(look|l)((?!at).)*$\")\r\n\r\n    def execute(self, context):\r\n        print(context.current_room.final_description())\r\n        return True\r\n\r\n\r\nclass LookAtAction(Action):\r\n    def __init__(self):\r\n        super().__init__(r\"^(look at|examine|x|check) (.+)\")\r\n\r\n    def execute(self, context):\r\n        match = self.regex.match(context.cmd)\r\n        g_object_name = match.groups()[1]\r\n        g_object = context.get_object_by_name(g_object_name)\r\n\r\n        print(g_object.description())\r\n\r\n\r\nclass JumpAction(Action):\r\n    def __init__(self):\r\n        super().__init__(r\"^jump\")\r\n\r\n    def execute(self, ctx):\r\n        print(\"You jump, like a little child. How fun.\")\r\n        return True\r\n\r\n\r\nall_actions = [LookAction, LookAtAction, JumpAction]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/avalon/actions.py b/avalon/actions.py
--- a/avalon/actions.py	(revision 8204ea5e6c3afae903c6b56dc8b4d8382809a3dc)
+++ b/avalon/actions.py	(date 1661781989467)
@@ -32,7 +32,11 @@
         g_object_name = match.groups()[1]
         g_object = context.get_object_by_name(g_object_name)
 
-        print(g_object.description())
+        intent = "examine" if match.groups()[0] == "x" else match.groups()[0]
+        if g_object:
+            print(g_object.final_description())
+        else:
+            print(f"'{g_object_name}' doesn't seem to be something you can {intent}.")
 
 
 class JumpAction(Action):
Index: avalon/rooms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import avalon.objects as objects\r\nfrom typing import List\r\n\r\n\r\nclass Room:\r\n    def __init__(self, name: str):\r\n        \"\"\"\r\n        Base class for a room. You should create a subclass of Room and use that in your game, ideally.\r\n        \"\"\"\r\n        self.name = name\r\n        self.description_string = None\r\n        self.objects: List[objects.GameObject] = []\r\n\r\n    def add_objects(self, *args):\r\n        self.objects.extend(args)\r\n\r\n    def description(self, desc=None):\r\n        if not desc:\r\n            return self.description_string\r\n\r\n    def final_description(self):\r\n        desc = \"\"\r\n\r\n        desc += self.description()\r\n\r\n        for g_object in self.objects:\r\n            desc += \"\\n\\n\" + g_object.inline_description()\r\n\r\n        return desc\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/avalon/rooms.py b/avalon/rooms.py
--- a/avalon/rooms.py	(revision 8204ea5e6c3afae903c6b56dc8b4d8382809a3dc)
+++ b/avalon/rooms.py	(date 1661781888458)
@@ -24,6 +24,7 @@
         desc += self.description()
 
         for g_object in self.objects:
-            desc += "\n\n" + g_object.inline_description()
+            inline_desc = g_object.final_inline_description()
+            desc += "\n\n" + inline_desc if inline_desc else ""
 
         return desc
Index: avalon/objects.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class GameObject:\r\n    def __init__(self, name: str):\r\n        self.name = name\r\n        self.description_string = None\r\n        self.inline_description_string = None\r\n\r\n    def description(self):\r\n        return self.description_string\r\n\r\n    def inline_description(self):\r\n        return self.inline_description_string\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/avalon/objects.py b/avalon/objects.py
--- a/avalon/objects.py	(revision 8204ea5e6c3afae903c6b56dc8b4d8382809a3dc)
+++ b/avalon/objects.py	(date 1661781888458)
@@ -1,11 +1,36 @@
 class GameObject:
     def __init__(self, name: str):
         self.name = name
-        self.description_string = None
+        self.description_string = ""
         self.inline_description_string = None
+        self.described = False
+        self.objects = []
+
+    def add_object(self, g_object):
+        self.objects.append(g_object)
 
     def description(self):
-        return self.description_string
+        pass
+
+    def final_description(self):
+        self.described = True
+        desc = self.description()
+
+        for sub_g_object in self.objects:
+            sub_g_object_desc = sub_g_object.final_description()
+
+            desc += f"\n{sub_g_object_desc}" if sub_g_object_desc else ""
+
+        return desc
 
     def inline_description(self):
-        return self.inline_description_string
+        pass
+    def final_inline_description(self):
+        desc = self.inline_description()
+
+        for sub_g_object in self.objects:
+            sub_g_object_desc = sub_g_object.final_inline_description()
+
+            desc += f"\n{sub_g_object_desc}" if sub_g_object_desc else ""
+
+        return desc
Index: avalon/text_adventure.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import avalon.rooms as rooms\r\nimport avalon.actions as actions\r\nimport avalon.objects as objects\r\n\r\nfrom rich import print as r_print\r\n\r\n\r\n\r\nclass TextAdventure:\r\n    def __init__(self, game_name: str, author_name: str, game_description: str = None):\r\n        \"\"\"\r\n        Create a new text adventure. Ideally, you would create a subclass of this, and pass that to `avalon.run`.\r\n\r\n        :param game_name: The name of the text adventure. (E.g.  \"The Bookshelf\")\r\n        :param author_name: The author of the game, probably you. (E.g. \"Andrew Plotkin\")\r\n        :param game_description: Optional. The description of the game.\r\n        \"\"\"\r\n\r\n        self.current_room = None\r\n        self.game_name = game_name\r\n        self.author_name = author_name\r\n        self.game_description = None\r\n\r\n        self.initial_room: rooms.Room | None = None\r\n\r\n        self.rooms = [self.initial_room]\r\n\r\n        self.cmd = \"\"\r\n\r\n    def check_if_game_valid(self):\r\n        if self.initial_room is None:\r\n            r_print(\r\n                \"[bold red]ERROR: [/bold red][red]The game does not have an initial room set. Please set the initial \"\r\n                \"room using [i]game.set_initial_room()[/i].\")\r\n\r\n            return False\r\n\r\n        return True\r\n\r\n    def set_initial_room(self, room: rooms.Room):\r\n        self.rooms.remove(self.initial_room)\r\n        self.initial_room = room\r\n        self.rooms.append(self.initial_room)\r\n    def get_object_by_name(self, name: str) -> objects.GameObject:\r\n        for room in self.rooms:\r\n            for g_object in room.objects:\r\n                if g_object.name == name:\r\n                    return g_object\r\n\r\n    def run(self):\r\n        if not self.check_if_game_valid():\r\n            print(\"Exited game execution - please fix any errors displayed above.\")\r\n            exit(1)\r\n\r\n        r_print(\r\n            f\"\"\"[bold cyan]{self.game_name}[/bold cyan]\\nBy [bold green]{self.author_name}[/bold green]\\n{'-' * len(self.game_name)}\"\"\"\r\n        )\r\n\r\n        print(\"\")\r\n        r_print(f\"[bold cyan]{self.initial_room.name}\")\r\n\r\n        self.current_room = self.initial_room\r\n\r\n        print(\"\")\r\n        print(self.current_room.final_description())\r\n\r\n        while True:\r\n            cmd = input(\"\\n> \")\r\n\r\n            self.cmd = cmd\r\n            for action in actions.all_actions:\r\n                act = action()\r\n\r\n                if act.validate(cmd):\r\n                    act.execute(self)\r\n                    break\r\n\r\n            else:\r\n                print(f\"I don't understand what you mean by '{cmd}'.\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/avalon/text_adventure.py b/avalon/text_adventure.py
--- a/avalon/text_adventure.py	(revision 8204ea5e6c3afae903c6b56dc8b4d8382809a3dc)
+++ b/avalon/text_adventure.py	(date 1661781888474)
@@ -1,3 +1,5 @@
+import re
+
 import avalon.rooms as rooms
 import avalon.actions as actions
 import avalon.objects as objects
@@ -65,15 +67,30 @@
         print(self.current_room.final_description())
 
         while True:
-            cmd = input("\n> ")
+            cmd = input("\n> ").lower()
 
             self.cmd = cmd
+
+            if cmd == "":
+                print("Great words of wisdom, those are.")
+                continue
+            elif cmd == "quit":
+                r_print(f"[red]Are you sure you'd like to quit [bold cyan]{self.game_name}[/bold cyan]? (Yes/no)")
+                inp = input("\n> ")
+                if inp in ['yes', 'y', 'confirm']:
+                    exit(0)
+                else:
+                    r_print("[red]Continuing the game.")
+                    continue
+
+            self.cmd = re.compile(" (the|a|an) ").sub(' ', self.cmd)
+
             for action in actions.all_actions:
                 act = action()
 
-                if act.validate(cmd):
+                if act.validate(self.cmd):
                     act.execute(self)
                     break
 
             else:
-                print(f"I don't understand what you mean by '{cmd}'.")
+                print(f"I don't understand what you mean by '{self.cmd}'.")
Index: game.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from avalon import TextAdventure, Room, GameObject, run_game\r\n\r\n\r\nclass StudyRoom(Room):\r\n    def __init__(self):\r\n        super().__init__(\r\n            \"Study Room\"\r\n        )\r\n\r\n        self.desc_counter = 0\r\n\r\n    def description(self, desc=None):\r\n        all_descs = [\r\n            \"You're standing in a lavish study room. An ornate rosewood desk sits in the corner, and the only exit \"\r\n            \"seems to be a steel door to the west.\",\r\n            \"This is a study room. An ornate desk is in the corner, and there's a steel door to the west.\"\r\n        ]\r\n\r\n        if self.desc_counter == 1:\r\n            self.desc_counter = 0\r\n        else:\r\n            self.desc_counter = 1\r\n\r\n        return all_descs[self.desc_counter]\r\n\r\n\r\nclass Desk(GameObject):\r\n    def __init__(self):\r\n        super().__init__(\"desk\")\r\n\r\n    def description(self):\r\n        return \"An ornate desk made of rosewood. It has no drawers, just a smooth surface. Above it is a bookshelf, \" \\\r\n               \"and on it is a rough leather book. \"\r\n\r\n    def inline_description(self):\r\n        return \"There's an ornate rosewood desk in the corner.\"\r\n\r\n\r\nclass TheBookshelf(TextAdventure):\r\n    def __init__(self):\r\n        super().__init__(\r\n            \"The Bookshelf\",\r\n            \"DarkWolf\"\r\n        )\r\n\r\n        self.set_initial_room(StudyRoom())\r\n        self.initial_room.add_objects(Desk())\r\n\r\n\r\ngame = TheBookshelf()\r\nrun_game(game)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/game.py b/game.py
--- a/game.py	(revision 8204ea5e6c3afae903c6b56dc8b4d8382809a3dc)
+++ b/game.py	(date 1661781888490)
@@ -24,13 +24,23 @@
         return all_descs[self.desc_counter]
 
 
+class Book(GameObject):
+    def __init__(self):
+        super().__init__("book")
+
+    def inline_description(self):
+        if game.get_object_by_name("desk").described:
+            return "There's a rough leather book on the desk."
+
+
 class Desk(GameObject):
     def __init__(self):
         super().__init__("desk")
+        self.add_object(Book())
 
     def description(self):
         return "An ornate desk made of rosewood. It has no drawers, just a smooth surface. Above it is a bookshelf, " \
-               "and on it is a rough leather book. "
+               "and on it is a rough leather book."
 
     def inline_description(self):
         return "There's an ornate rosewood desk in the corner."
